pipeline {
    agent any

    parameters {
        string(name: 'artifactory_api_key', defaultValue: '', description: 'Artifactory API Key')
        string(name: 'jenkins_sonar_token', defaultValue: '', description: 'SonarQube Token')
    }

    stages {
        stage('Clone Project') {
            steps {
                git 'https://github.com/shegerbootcamp/docker-lab.git'
            }
        }

        stage('Unit Test') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn test' // Run the unit tests
                }
            }
        }

        stage('SonarQube analysis') {
            steps {
                dir('petclinic-app') {
                    withSonarQubeEnv('SonarScanner') {
                        sh """
                            mvn -Dmaven.test.failure.ignore=true -Dcheckstyle.skip sonar:sonar \
                                -Dsonar.host.url=http://192.168.92.182:9000 \
                                -Dsonar.projectKey=petclinic \
                                -Dsonar.token=${params.jenkins_sonar_token} \
                                -Dsonar.projectName='petclinic'
                        """
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn -Dmaven.test.failure.ignore=true -Dcheckstyle.skip clean package'
                    archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
                }
            }
        }

        stage('Upload to Artifactory') {
            steps {
                script {
                    def artifactoryUrl = 'https://shegerlab2024.jfrog.io/artifactory/petclinic-generic-local/petclinic.jar'
                    def localJarPath = 'petclinic-app/target/*-SNAPSHOT.jar'

                    sh "curl -H 'X-JFrog-Art-Api:${params.artifactory_api_key}' -T ${localJarPath} ${artifactoryUrl}"
                }
            }
        }
    }

    post {
        failure {
            slackSend(
                channel: "#jenkins-build-sonar", 
                tokenCredentialId: "SLACK-TOKEN", 
                color: "danger", 
                message: "${custom_msg()}"
            )
        }
    }
}

def custom_msg() {
    def JENKINS_URL = "http://192.168.92.181:8080"
    def JOB_NAME = env.JOB_NAME
    def BUILD_ID = env.BUILD_ID
    def JENKINS_LOG = "FAILED: Job [${JOB_NAME}] Logs: ${JENKINS_URL}/job/${JOB_NAME}/${BUILD_ID}/consoleText"
    return JENKINS_LOG
}