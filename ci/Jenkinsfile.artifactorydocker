pipeline {
    agent any
    
    tools {
        jfrog 'jfrog-cli'
    }

    parameters {
        string(name: 'ProjectKey', defaultValue: 'petclinic', description: 'SonarQube project key')
        string(name: 'ProjectName', defaultValue: 'petclinic', description: 'SonarQube project name')
        string(name: 'SonarHostUrl', defaultValue: 'http://192.168.92.182:9000', description: 'SonarQube server URL')
        string(name: 'SlackChannel', defaultValue: '#jenkins-build-sonar', description: 'Slack channel to send notifications')
        string(name: 'SlackTokenCredentialId', defaultValue: 'SLACK-TOKEN', description: 'Slack token credential ID')
    }
    environment {
        //shegerlab2024.jfrog.io/petclinic
        DOCKER_IMAGE_NAME = "shegerlab2024.jfrog.io/petclinic/petclinic:1.0.0"
    }
    stages {
        stage('Clone') {
            steps {
                git branch: 'master', url: "https://github.com/shegerbootcamp/docker-lab.git"
            }
        }

        stage('Unit Test') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn test' // Build the package without running tests
                }
            }
        }

        stage('Sonar Static Code Analysis') {
            steps {
                dir('petclinic-app') { // Ensure SonarQube runs within the project directory
                    withCredentials([string(credentialsId: 'jenkins-sonar-token', variable: 'sonar_token')]) {
                        sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${params.ProjectKey} \
                            -Dsonar.projectName='${params.ProjectName}' \
                            -Dsonar.host.url=${params.SonarHostUrl} \
                            -Dsonar.login=${sonar_token}
                        """
                    }
                }
            }
        }
        
        stage('Build Package') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn clean install -DskipTests=true' // Build the package without running tests
                }
            }
        }

        stage('Build Docker image') {
            steps {
                 
                script {
                    docker.build("$DOCKER_IMAGE_NAME", 'petclinic-app')
                }
               
            }
        }

        stage('Scan and push image') {
            steps {
                dir('petclinic-app/') {
                    // Scan Docker image for vulnerabilities
                    jf 'docker scan $DOCKER_IMAGE_NAME'

                    // Push image to Artifactory
                    jf 'docker push $DOCKER_IMAGE_NAME'
                }
            }
        }

        stage('Publish build info') {
            steps {
                jf 'rt build-publish'
            }
        }
    }
    post {
        success {
            dir('petclinic-app') {
                junit '**/target/surefire-reports/TEST-*.xml' // Archive JUnit test results
                archiveArtifacts 'target/*.jar' // Archive JAR files
            }
        }

        always {
            slackSend (
                channel: params.SlackChannel, // Use the parameterized Slack channel
                color: 'good', // or 'danger' based on the build status
                tokenCredentialId: params.SlackTokenCredentialId, // Use the parameterized Slack token
                message: "Pipeline Status: ${currentBuild.currentResult} - ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${BUILD_URL}"
            )
        }

        cleanup {
            cleanWs() // Clean up workspace
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '3')) // Rotate logs, keep builds for 3 days
    }
}